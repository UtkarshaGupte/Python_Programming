{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d3830292",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "539. Minimum Time Difference\n",
    "Given a list of 24-hour clock time points in \"HH:MM\" format, return the minimum minutes difference between \n",
    "any two time-points in the list.\n",
    " \n",
    "\n",
    "Example 1:\n",
    "Input: timePoints = [\"23:59\",\"00:00\"]\n",
    "Output: 1\n",
    "\n",
    "Example 2:\n",
    "Input: timePoints = [\"00:00\",\"23:59\",\"00:00\"]\n",
    "Output: 0\n",
    "\n",
    "Time/Space Complexity:\n",
    "\n",
    "Time - O(n)\n",
    "\n",
    "Space - O(1)\n",
    "'''\n",
    "\n",
    "class Solution:\n",
    "    def findMinDifference(self, timePoints: List[str]) -> int:\n",
    "        \n",
    "        TotalMinInDay = 1440\n",
    "        \n",
    "        timePointsArray = [False] * TotalMinInDay\n",
    "        \n",
    "        for timePoint in timePoints:\n",
    "            \n",
    "            h, m = map(int, timePoint.split(':'))\n",
    "            timePointMin = 60 * h + m\n",
    "            \n",
    "            \n",
    "            if timePointsArray[timePointMin]:\n",
    "                return 0\n",
    "            \n",
    "            timePointsArray[timePointMin] = True\n",
    "            \n",
    "        \n",
    "        timePointsTrue = [minutes for minutes in range(TotalMinInDay) if timePointsArray[minutes]]\n",
    "        \n",
    "        res = min([(timePointsTrue[i] - timePointsTrue[i-1])%TotalMinInDay for i in range(len(timePointsTrue))])\n",
    "        \n",
    "        \n",
    "        return res"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
